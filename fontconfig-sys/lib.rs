/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl ::std::default::Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for _opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = usize;
pub type ssize_t = isize;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
impl ::std::default::Default for ostat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::default::Default for stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::default::Default for stat64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _filesec { }
pub type filesec_t = *mut _filesec;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type FcChar8 = ::std::os::raw::c_uchar;
pub type FcChar16 = ::std::os::raw::c_ushort;
pub type FcChar32 = ::std::os::raw::c_uint;
pub type FcBool = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _FcType {
    FcTypeUnknown = -1,
    FcTypeVoid = 0,
    FcTypeInteger = 1,
    FcTypeDouble = 2,
    FcTypeString = 3,
    FcTypeBool = 4,
    FcTypeMatrix = 5,
    FcTypeCharSet = 6,
    FcTypeFTFace = 7,
    FcTypeLangSet = 8,
    FcTypeRange = 9,
}
pub type FcType = _FcType;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcMatrix {
    pub xx: f64,
    pub xy: f64,
    pub yx: f64,
    pub yy: f64,
}
impl ::std::default::Default for _FcMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcMatrix = _FcMatrix;
pub enum _FcCharSet { }
pub type FcCharSet = _FcCharSet;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcObjectType {
    pub object: *mut ::std::os::raw::c_char,
    pub type_: FcType,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _FcObjectType {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcObjectType = _FcObjectType;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcConstant {
    pub name: *const FcChar8,
    pub object: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _FcConstant {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcConstant = _FcConstant;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug, PartialEq, Eq)]
pub enum FcResult {
    FcResultMatch = 0,
    FcResultNoMatch = 1,
    FcResultTypeMismatch = 2,
    FcResultNoId = 3,
    FcResultOutOfMemory = 4,
}
pub enum _FcPattern { }
pub type FcPattern = _FcPattern;
pub enum _FcLangSet { }
pub type FcLangSet = _FcLangSet;
pub enum _FcRange { }
pub type FcRange = _FcRange;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcValue {
    pub type_: FcType,
    pub u: Union_Unnamed1,
}
impl ::std::default::Default for _FcValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn s(&mut self) -> *mut *const FcChar8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut FcBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut f64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn m(&mut self) -> *mut *const FcMatrix {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut *const FcCharSet {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut *const FcLangSet {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn r(&mut self) -> *mut *const FcRange {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcValue = _FcValue;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcFontSet {
    pub nfont: ::std::os::raw::c_int,
    pub sfont: ::std::os::raw::c_int,
    pub fonts: *mut *mut FcPattern,
}
impl ::std::default::Default for _FcFontSet {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcFontSet = _FcFontSet;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _FcObjectSet {
    pub nobject: ::std::os::raw::c_int,
    pub sobject: ::std::os::raw::c_int,
    pub objects: *mut *const ::std::os::raw::c_char,
}
impl ::std::default::Default for _FcObjectSet {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FcObjectSet = _FcObjectSet;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _FcMatchKind {
    FcMatchPattern = 0,
    FcMatchFont = 1,
    FcMatchScan = 2,
}
pub type FcMatchKind = _FcMatchKind;
pub const FcLangDifferentTerritory: _FcLangResult =
    _FcLangResult::FcLangDifferentCountry;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _FcLangResult {
    FcLangEqual = 0,
    FcLangDifferentCountry = 1,
    FcLangDifferentLang = 2,
}
pub type FcLangResult = _FcLangResult;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _FcSetName { FcSetSystem = 0, FcSetApplication = 1, }
pub type FcSetName = _FcSetName;
pub enum _FcAtomic { }
pub type FcAtomic = _FcAtomic;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum FcEndian { FcEndianBig = 0, FcEndianLittle = 1, }
pub enum _FcConfig { }
pub type FcConfig = _FcConfig;
pub enum _FcGlobalCache { }
pub type FcFileCache = _FcGlobalCache;
pub enum _FcBlanks { }
pub type FcBlanks = _FcBlanks;
pub enum _FcStrList { }
pub type FcStrList = _FcStrList;
pub enum _FcStrSet { }
pub type FcStrSet = _FcStrSet;
pub enum _FcCache { }
pub type FcCache = _FcCache;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat)
     -> ::std::os::raw::c_int;
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat)
     -> ::std::os::raw::c_int;
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat)
     -> ::std::os::raw::c_int;
    pub fn mknod(arg1: *const ::std::os::raw::c_char, arg2: mode_t,
                 arg3: dev_t) -> ::std::os::raw::c_int;
    pub fn umask(arg1: mode_t) -> mode_t;
    pub fn fchmodat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: mode_t,
                    arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fstatat(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut stat,
                   arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn mkdirat(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, arg3: mode_t)
     -> ::std::os::raw::c_int;
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn fstatx_np(arg1: ::std::os::raw::c_int, arg2: *mut stat,
                     arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn lstatx_np(arg1: *const ::std::os::raw::c_char, arg2: *mut stat,
                     arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn mkfifox_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn statx_np(arg1: *const ::std::os::raw::c_char, arg2: *mut stat,
                    arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
    pub fn fstatx64_np(arg1: ::std::os::raw::c_int, arg2: *mut stat64,
                       arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn lstatx64_np(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64,
                       arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn statx64_np(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64,
                      arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64)
     -> ::std::os::raw::c_int;
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
     -> ::std::os::raw::c_int;
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
     -> ::std::os::raw::c_int;
    pub fn FcBlanksCreate() -> *mut FcBlanks;
    pub fn FcBlanksDestroy(b: *mut FcBlanks);
    pub fn FcBlanksAdd(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
    pub fn FcBlanksIsMember(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
    pub fn FcCacheDir(c: *const FcCache) -> *const FcChar8;
    pub fn FcCacheCopySet(c: *const FcCache) -> *mut FcFontSet;
    pub fn FcCacheSubdir(c: *const FcCache, i: ::std::os::raw::c_int)
     -> *const FcChar8;
    pub fn FcCacheNumSubdir(c: *const FcCache) -> ::std::os::raw::c_int;
    pub fn FcCacheNumFont(c: *const FcCache) -> ::std::os::raw::c_int;
    pub fn FcDirCacheUnlink(dir: *const FcChar8, config: *mut FcConfig)
     -> FcBool;
    pub fn FcDirCacheValid(cache_file: *const FcChar8) -> FcBool;
    pub fn FcDirCacheClean(cache_dir: *const FcChar8, verbose: FcBool)
     -> FcBool;
    pub fn FcCacheCreateTagFile(config: *const FcConfig);
    pub fn FcConfigHome() -> *mut FcChar8;
    pub fn FcConfigEnableHome(enable: FcBool) -> FcBool;
    pub fn FcConfigFilename(url: *const FcChar8) -> *mut FcChar8;
    pub fn FcConfigCreate() -> *mut FcConfig;
    pub fn FcConfigReference(config: *mut FcConfig) -> *mut FcConfig;
    pub fn FcConfigDestroy(config: *mut FcConfig);
    pub fn FcConfigSetCurrent(config: *mut FcConfig) -> FcBool;
    pub fn FcConfigGetCurrent() -> *mut FcConfig;
    pub fn FcConfigUptoDate(config: *mut FcConfig) -> FcBool;
    pub fn FcConfigBuildFonts(config: *mut FcConfig) -> FcBool;
    pub fn FcConfigGetFontDirs(config: *mut FcConfig) -> *mut FcStrList;
    pub fn FcConfigGetConfigDirs(config: *mut FcConfig) -> *mut FcStrList;
    pub fn FcConfigGetConfigFiles(config: *mut FcConfig) -> *mut FcStrList;
    pub fn FcConfigGetCache(config: *mut FcConfig) -> *mut FcChar8;
    pub fn FcConfigGetBlanks(config: *mut FcConfig) -> *mut FcBlanks;
    pub fn FcConfigGetCacheDirs(config: *const FcConfig) -> *mut FcStrList;
    pub fn FcConfigGetRescanInterval(config: *mut FcConfig)
     -> ::std::os::raw::c_int;
    pub fn FcConfigSetRescanInterval(config: *mut FcConfig,
                                     rescanInterval: ::std::os::raw::c_int)
     -> FcBool;
    pub fn FcConfigGetFonts(config: *mut FcConfig, set: FcSetName)
     -> *mut FcFontSet;
    pub fn FcConfigAppFontAddFile(config: *mut FcConfig, file: *const FcChar8)
     -> FcBool;
    pub fn FcConfigAppFontAddDir(config: *mut FcConfig, dir: *const FcChar8)
     -> FcBool;
    pub fn FcConfigAppFontClear(config: *mut FcConfig);
    pub fn FcConfigSubstituteWithPat(config: *mut FcConfig, p: *mut FcPattern,
                                     p_pat: *mut FcPattern, kind: FcMatchKind)
     -> FcBool;
    pub fn FcConfigSubstitute(config: *mut FcConfig, p: *mut FcPattern,
                              kind: FcMatchKind) -> FcBool;
    pub fn FcConfigGetSysRoot(config: *const FcConfig) -> *const FcChar8;
    pub fn FcConfigSetSysRoot(config: *mut FcConfig, sysroot: *const FcChar8);
    pub fn FcCharSetCreate() -> *mut FcCharSet;
    pub fn FcCharSetNew() -> *mut FcCharSet;
    pub fn FcCharSetDestroy(fcs: *mut FcCharSet);
    pub fn FcCharSetAddChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
    pub fn FcCharSetDelChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
    pub fn FcCharSetCopy(src: *mut FcCharSet) -> *mut FcCharSet;
    pub fn FcCharSetEqual(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
    pub fn FcCharSetIntersect(a: *const FcCharSet, b: *const FcCharSet)
     -> *mut FcCharSet;
    pub fn FcCharSetUnion(a: *const FcCharSet, b: *const FcCharSet)
     -> *mut FcCharSet;
    pub fn FcCharSetSubtract(a: *const FcCharSet, b: *const FcCharSet)
     -> *mut FcCharSet;
    pub fn FcCharSetMerge(a: *mut FcCharSet, b: *const FcCharSet,
                          changed: *mut FcBool) -> FcBool;
    pub fn FcCharSetHasChar(fcs: *const FcCharSet, ucs4: FcChar32) -> FcBool;
    pub fn FcCharSetCount(a: *const FcCharSet) -> FcChar32;
    pub fn FcCharSetIntersectCount(a: *const FcCharSet, b: *const FcCharSet)
     -> FcChar32;
    pub fn FcCharSetSubtractCount(a: *const FcCharSet, b: *const FcCharSet)
     -> FcChar32;
    pub fn FcCharSetIsSubset(a: *const FcCharSet, b: *const FcCharSet)
     -> FcBool;
    pub fn FcCharSetFirstPage(a: *const FcCharSet, map: *mut FcChar32,
                              next: *mut FcChar32) -> FcChar32;
    pub fn FcCharSetNextPage(a: *const FcCharSet, map: *mut FcChar32,
                             next: *mut FcChar32) -> FcChar32;
    pub fn FcCharSetCoverage(a: *const FcCharSet, page: FcChar32,
                             result: *mut FcChar32) -> FcChar32;
    pub fn FcValuePrint(v: FcValue);
    pub fn FcPatternPrint(p: *const FcPattern);
    pub fn FcFontSetPrint(s: *const FcFontSet);
    pub fn FcGetDefaultLangs() -> *mut FcStrSet;
    pub fn FcDefaultSubstitute(pattern: *mut FcPattern);
    pub fn FcFileIsDir(file: *const FcChar8) -> FcBool;
    pub fn FcFileScan(set: *mut FcFontSet, dirs: *mut FcStrSet,
                      cache: *mut FcFileCache, blanks: *mut FcBlanks,
                      file: *const FcChar8, force: FcBool) -> FcBool;
    pub fn FcDirScan(set: *mut FcFontSet, dirs: *mut FcStrSet,
                     cache: *mut FcFileCache, blanks: *mut FcBlanks,
                     dir: *const FcChar8, force: FcBool) -> FcBool;
    pub fn FcDirSave(set: *mut FcFontSet, dirs: *mut FcStrSet,
                     dir: *const FcChar8) -> FcBool;
    pub fn FcDirCacheLoad(dir: *const FcChar8, config: *mut FcConfig,
                          cache_file: *mut *mut FcChar8) -> *mut FcCache;
    pub fn FcDirCacheRescan(dir: *const FcChar8, config: *mut FcConfig)
     -> *mut FcCache;
    pub fn FcDirCacheRead(dir: *const FcChar8, force: FcBool,
                          config: *mut FcConfig) -> *mut FcCache;
    pub fn FcDirCacheLoadFile(cache_file: *const FcChar8,
                              file_stat: *mut stat) -> *mut FcCache;
    pub fn FcDirCacheUnload(cache: *mut FcCache);
    pub fn FcFreeTypeQuery(file: *const FcChar8, id: ::std::os::raw::c_int,
                           blanks: *mut FcBlanks,
                           count: *mut ::std::os::raw::c_int)
     -> *mut FcPattern;
    pub fn FcFontSetCreate() -> *mut FcFontSet;
    pub fn FcFontSetDestroy(s: *mut FcFontSet);
    pub fn FcFontSetAdd(s: *mut FcFontSet, font: *mut FcPattern) -> FcBool;
    pub fn FcInitLoadConfig() -> *mut FcConfig;
    pub fn FcInitLoadConfigAndFonts() -> *mut FcConfig;
    pub fn FcInit() -> FcBool;
    pub fn FcFini();
    pub fn FcGetVersion() -> ::std::os::raw::c_int;
    pub fn FcInitReinitialize() -> FcBool;
    pub fn FcInitBringUptoDate() -> FcBool;
    pub fn FcGetLangs() -> *mut FcStrSet;
    pub fn FcLangNormalize(lang: *const FcChar8) -> *mut FcChar8;
    pub fn FcLangGetCharSet(lang: *const FcChar8) -> *const FcCharSet;
    pub fn FcLangSetCreate() -> *mut FcLangSet;
    pub fn FcLangSetDestroy(ls: *mut FcLangSet);
    pub fn FcLangSetCopy(ls: *const FcLangSet) -> *mut FcLangSet;
    pub fn FcLangSetAdd(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
    pub fn FcLangSetDel(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
    pub fn FcLangSetHasLang(ls: *const FcLangSet, lang: *const FcChar8)
     -> FcLangResult;
    pub fn FcLangSetCompare(lsa: *const FcLangSet, lsb: *const FcLangSet)
     -> FcLangResult;
    pub fn FcLangSetContains(lsa: *const FcLangSet, lsb: *const FcLangSet)
     -> FcBool;
    pub fn FcLangSetEqual(lsa: *const FcLangSet, lsb: *const FcLangSet)
     -> FcBool;
    pub fn FcLangSetHash(ls: *const FcLangSet) -> FcChar32;
    pub fn FcLangSetGetLangs(ls: *const FcLangSet) -> *mut FcStrSet;
    pub fn FcLangSetUnion(a: *const FcLangSet, b: *const FcLangSet)
     -> *mut FcLangSet;
    pub fn FcLangSetSubtract(a: *const FcLangSet, b: *const FcLangSet)
     -> *mut FcLangSet;
    pub fn FcObjectSetCreate() -> *mut FcObjectSet;
    pub fn FcObjectSetAdd(os: *mut FcObjectSet,
                          object: *const ::std::os::raw::c_char) -> FcBool;
    pub fn FcObjectSetDestroy(os: *mut FcObjectSet);
    pub fn FcObjectSetVaBuild(first: *const ::std::os::raw::c_char,
                              va: va_list) -> *mut FcObjectSet;
    pub fn FcObjectSetBuild(first: *const ::std::os::raw::c_char, ...)
     -> *mut FcObjectSet;
    pub fn FcFontSetList(config: *mut FcConfig, sets: *mut *mut FcFontSet,
                         nsets: ::std::os::raw::c_int, p: *mut FcPattern,
                         os: *mut FcObjectSet) -> *mut FcFontSet;
    pub fn FcFontList(config: *mut FcConfig, p: *mut FcPattern,
                      os: *mut FcObjectSet) -> *mut FcFontSet;
    pub fn FcAtomicCreate(file: *const FcChar8) -> *mut FcAtomic;
    pub fn FcAtomicLock(atomic: *mut FcAtomic) -> FcBool;
    pub fn FcAtomicNewFile(atomic: *mut FcAtomic) -> *mut FcChar8;
    pub fn FcAtomicOrigFile(atomic: *mut FcAtomic) -> *mut FcChar8;
    pub fn FcAtomicReplaceOrig(atomic: *mut FcAtomic) -> FcBool;
    pub fn FcAtomicDeleteNew(atomic: *mut FcAtomic);
    pub fn FcAtomicUnlock(atomic: *mut FcAtomic);
    pub fn FcAtomicDestroy(atomic: *mut FcAtomic);
    pub fn FcFontSetMatch(config: *mut FcConfig, sets: *mut *mut FcFontSet,
                          nsets: ::std::os::raw::c_int, p: *mut FcPattern,
                          result: *mut FcResult) -> *mut FcPattern;
    pub fn FcFontMatch(config: *mut FcConfig, p: *mut FcPattern,
                       result: *mut FcResult) -> *mut FcPattern;
    pub fn FcFontRenderPrepare(config: *mut FcConfig, pat: *mut FcPattern,
                               font: *mut FcPattern) -> *mut FcPattern;
    pub fn FcFontSetSort(config: *mut FcConfig, sets: *mut *mut FcFontSet,
                         nsets: ::std::os::raw::c_int, p: *mut FcPattern,
                         trim: FcBool, csp: *mut *mut FcCharSet,
                         result: *mut FcResult) -> *mut FcFontSet;
    pub fn FcFontSort(config: *mut FcConfig, p: *mut FcPattern, trim: FcBool,
                      csp: *mut *mut FcCharSet, result: *mut FcResult)
     -> *mut FcFontSet;
    pub fn FcFontSetSortDestroy(fs: *mut FcFontSet);
    pub fn FcMatrixCopy(mat: *const FcMatrix) -> *mut FcMatrix;
    pub fn FcMatrixEqual(mat1: *const FcMatrix, mat2: *const FcMatrix)
     -> FcBool;
    pub fn FcMatrixMultiply(result: *mut FcMatrix, a: *const FcMatrix,
                            b: *const FcMatrix);
    pub fn FcMatrixRotate(m: *mut FcMatrix, c: f64, s: f64);
    pub fn FcMatrixScale(m: *mut FcMatrix, sx: f64, sy: f64);
    pub fn FcMatrixShear(m: *mut FcMatrix, sh: f64, sv: f64);
    pub fn FcNameRegisterObjectTypes(types: *const FcObjectType,
                                     ntype: ::std::os::raw::c_int) -> FcBool;
    pub fn FcNameUnregisterObjectTypes(types: *const FcObjectType,
                                       ntype: ::std::os::raw::c_int)
     -> FcBool;
    pub fn FcNameGetObjectType(object: *const ::std::os::raw::c_char)
     -> *const FcObjectType;
    pub fn FcNameRegisterConstants(consts: *const FcConstant,
                                   nconsts: ::std::os::raw::c_int) -> FcBool;
    pub fn FcNameUnregisterConstants(consts: *const FcConstant,
                                     nconsts: ::std::os::raw::c_int)
     -> FcBool;
    pub fn FcNameGetConstant(string: *const FcChar8) -> *const FcConstant;
    pub fn FcNameConstant(string: *const FcChar8,
                          result: *mut ::std::os::raw::c_int) -> FcBool;
    pub fn FcNameParse(name: *const FcChar8) -> *mut FcPattern;
    pub fn FcNameUnparse(pat: *mut FcPattern) -> *mut FcChar8;
    pub fn FcPatternCreate() -> *mut FcPattern;
    pub fn FcPatternDuplicate(p: *const FcPattern) -> *mut FcPattern;
    pub fn FcPatternReference(p: *mut FcPattern);
    pub fn FcPatternFilter(p: *mut FcPattern, os: *const FcObjectSet)
     -> *mut FcPattern;
    pub fn FcValueDestroy(v: FcValue);
    pub fn FcValueEqual(va: FcValue, vb: FcValue) -> FcBool;
    pub fn FcValueSave(v: FcValue) -> FcValue;
    pub fn FcPatternDestroy(p: *mut FcPattern);
    pub fn FcPatternEqual(pa: *const FcPattern, pb: *const FcPattern)
     -> FcBool;
    pub fn FcPatternEqualSubset(pa: *const FcPattern, pb: *const FcPattern,
                                os: *const FcObjectSet) -> FcBool;
    pub fn FcPatternHash(p: *const FcPattern) -> FcChar32;
    pub fn FcPatternAdd(p: *mut FcPattern,
                        object: *const ::std::os::raw::c_char, value: FcValue,
                        append: FcBool) -> FcBool;
    pub fn FcPatternAddWeak(p: *mut FcPattern,
                            object: *const ::std::os::raw::c_char,
                            value: FcValue, append: FcBool) -> FcBool;
    pub fn FcPatternGet(p: *const FcPattern,
                        object: *const ::std::os::raw::c_char,
                        id: ::std::os::raw::c_int, v: *mut FcValue)
     -> FcResult;
    pub fn FcPatternDel(p: *mut FcPattern,
                        object: *const ::std::os::raw::c_char) -> FcBool;
    pub fn FcPatternRemove(p: *mut FcPattern,
                           object: *const ::std::os::raw::c_char,
                           id: ::std::os::raw::c_int) -> FcBool;
    pub fn FcPatternAddInteger(p: *mut FcPattern,
                               object: *const ::std::os::raw::c_char,
                               i: ::std::os::raw::c_int) -> FcBool;
    pub fn FcPatternAddDouble(p: *mut FcPattern,
                              object: *const ::std::os::raw::c_char, d: f64)
     -> FcBool;
    pub fn FcPatternAddString(p: *mut FcPattern,
                              object: *const ::std::os::raw::c_char,
                              s: *const FcChar8) -> FcBool;
    pub fn FcPatternAddMatrix(p: *mut FcPattern,
                              object: *const ::std::os::raw::c_char,
                              s: *const FcMatrix) -> FcBool;
    pub fn FcPatternAddCharSet(p: *mut FcPattern,
                               object: *const ::std::os::raw::c_char,
                               c: *const FcCharSet) -> FcBool;
    pub fn FcPatternAddBool(p: *mut FcPattern,
                            object: *const ::std::os::raw::c_char, b: FcBool)
     -> FcBool;
    pub fn FcPatternAddLangSet(p: *mut FcPattern,
                               object: *const ::std::os::raw::c_char,
                               ls: *const FcLangSet) -> FcBool;
    pub fn FcPatternAddRange(p: *mut FcPattern,
                             object: *const ::std::os::raw::c_char,
                             r: *const FcRange) -> FcBool;
    pub fn FcPatternGetInteger(p: *const FcPattern,
                               object: *const ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               i: *mut ::std::os::raw::c_int) -> FcResult;
    pub fn FcPatternGetDouble(p: *const FcPattern,
                              object: *const ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int, d: *mut f64)
     -> FcResult;
    pub fn FcPatternGetString(p: *const FcPattern,
                              object: *const ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int, s: *mut *mut FcChar8)
     -> FcResult;
    pub fn FcPatternGetMatrix(p: *const FcPattern,
                              object: *const ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int, s: *mut *mut FcMatrix)
     -> FcResult;
    pub fn FcPatternGetCharSet(p: *const FcPattern,
                               object: *const ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               c: *mut *mut FcCharSet) -> FcResult;
    pub fn FcPatternGetBool(p: *const FcPattern,
                            object: *const ::std::os::raw::c_char,
                            n: ::std::os::raw::c_int, b: *mut FcBool)
     -> FcResult;
    pub fn FcPatternGetLangSet(p: *const FcPattern,
                               object: *const ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               ls: *mut *mut FcLangSet) -> FcResult;
    pub fn FcPatternGetRange(p: *const FcPattern,
                             object: *const ::std::os::raw::c_char,
                             id: ::std::os::raw::c_int, r: *mut *mut FcRange)
     -> FcResult;
    pub fn FcPatternVaBuild(p: *mut FcPattern, va: va_list) -> *mut FcPattern;
    pub fn FcPatternBuild(p: *mut FcPattern, ...) -> *mut FcPattern;
    pub fn FcPatternFormat(pat: *mut FcPattern, format: *const FcChar8)
     -> *mut FcChar8;
    pub fn FcRangeCreateDouble(begin: f64, end: f64) -> *mut FcRange;
    pub fn FcRangeCreateInteger(begin: FcChar32, end: FcChar32)
     -> *mut FcRange;
    pub fn FcRangeDestroy(range: *mut FcRange);
    pub fn FcRangeCopy(r: *const FcRange) -> *mut FcRange;
    pub fn FcRangeGetDouble(range: *const FcRange, begin: *mut f64,
                            end: *mut f64) -> FcBool;
    pub fn FcWeightFromOpenType(ot_weight: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn FcWeightToOpenType(fc_weight: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn FcStrCopy(s: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrCopyFilename(s: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrPlus(s1: *const FcChar8, s2: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrFree(s: *mut FcChar8);
    pub fn FcStrDowncase(s: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrCmpIgnoreCase(s1: *const FcChar8, s2: *const FcChar8)
     -> ::std::os::raw::c_int;
    pub fn FcStrCmp(s1: *const FcChar8, s2: *const FcChar8)
     -> ::std::os::raw::c_int;
    pub fn FcStrStrIgnoreCase(s1: *const FcChar8, s2: *const FcChar8)
     -> *const FcChar8;
    pub fn FcStrStr(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
    pub fn FcUtf8ToUcs4(src_orig: *const FcChar8, dst: *mut FcChar32,
                        len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn FcUtf8Len(string: *const FcChar8, len: ::std::os::raw::c_int,
                     nchar: *mut ::std::os::raw::c_int,
                     wchar: *mut ::std::os::raw::c_int) -> FcBool;
    pub fn FcUcs4ToUtf8(ucs4: FcChar32, dest: *mut FcChar8)
     -> ::std::os::raw::c_int;
    pub fn FcUtf16ToUcs4(src_orig: *const FcChar8, endian: FcEndian,
                         dst: *mut FcChar32, len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn FcUtf16Len(string: *const FcChar8, endian: FcEndian,
                      len: ::std::os::raw::c_int,
                      nchar: *mut ::std::os::raw::c_int,
                      wchar: *mut ::std::os::raw::c_int) -> FcBool;
    pub fn FcStrDirname(file: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrBasename(file: *const FcChar8) -> *mut FcChar8;
    pub fn FcStrSetCreate() -> *mut FcStrSet;
    pub fn FcStrSetMember(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
    pub fn FcStrSetEqual(sa: *mut FcStrSet, sb: *mut FcStrSet) -> FcBool;
    pub fn FcStrSetAdd(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
    pub fn FcStrSetAddFilename(set: *mut FcStrSet, s: *const FcChar8)
     -> FcBool;
    pub fn FcStrSetDel(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
    pub fn FcStrSetDestroy(set: *mut FcStrSet);
    pub fn FcStrListCreate(set: *mut FcStrSet) -> *mut FcStrList;
    pub fn FcStrListFirst(list: *mut FcStrList);
    pub fn FcStrListNext(list: *mut FcStrList) -> *mut FcChar8;
    pub fn FcStrListDone(list: *mut FcStrList);
    pub fn FcConfigParseAndLoad(config: *mut FcConfig, file: *const FcChar8,
                                complain: FcBool) -> FcBool;
}
